@using Match = HorseBets.Bets.Models.Match;

@inject IHorseApi HorseService
@inject IMatchApi MatchService

@inherits CancellableComponent

<fieldset class="border rounded-3 p-3 wrapper">
    <legend class="float-none w-auto px-3">Create</legend>
    <div class="card">
        <div class="card-body">
            <EditForm Model="Model" OnSubmit="CreateNewMatch" id="CreateMatch">
                <label for="startDate">Start Date</label>
                <input id="startDate" class="form-control mb-2" type="datetime-local" @bind="Model!.StartTime" min="@MinStartTime.ToString("yyyy-MM-ddTHH:mm")" />
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Name</th>
                                <th scope="col">Power</th>
                                <th scope="col">In</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (horses != null)
                            {
                                @for (int i = 0; i < horses.Count(); i++)
                                {
                                    int index = i + 1;
                                    string horseId = horses[i].Id;
                                    <tr>
                                        <th scope="row">@index</th>
                                        <td>@horses[i].Name</td>
                                        <td>@horses[i].Speed</td>
                                        <td>
                                            <input class="form-check-input" @onchange="eventArgs => { CheckboxClicked(horseId, eventArgs.Value); }" type="checkbox" id="horseParticipation">
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <h4>Loading...</h4>
                            }
                        </tbody>
                    </table>
                </div>
            </EditForm>
        </div>
        <div class="card-footer">
            @if (!string.IsNullOrEmpty(ValidationError))
            {
                <small id="amountWarning" class="form-text text-muted">@ValidationError</small>
            }
            <button type="submit" form="CreateMatch" class="btn btn-primary @IsCreateButtonDisabled">Create</button>
        </div>
    </div>
</fieldset>

@code {
    [Parameter]
    public int MinimumNumberOfHorses { get; set; } = 3;
    [Parameter]
    public EventCallback<Match> OnCreate { get; set; }
    [SupplyParameterFromForm]
    public Match? Model { get; set; } = new();

    private List<Horse> horses = null!;

    public DateTime MinStartTime { get => DateTime.Now.AddMinutes(4); }
    private bool IsEnoughParticipants { get => Model!.Participants.Count >= MinimumNumberOfHorses; }
    private string ValidationError 
    { 
        get
        {
            string error = string.Empty;
            if (Model?.StartTime < MinStartTime)
                error = "Time must be in 5 minutes from now.";
            else if (!IsEnoughParticipants)
                error = $"You must select at least {MinimumNumberOfHorses} participants.";
            return error;
        } 
    }
    private string IsCreateButtonDisabled { get => IsEnoughParticipants && Model?.StartTime >= MinStartTime ? "" : "disabled"; }

    protected override async Task OnInitializedAsync()
    {
        SetDefaultTime();
        await GetAllHorser();
    }
    private async Task CreateNewMatch()
    {
        Match createdMatch = await MatchService.CreateNewMatchAsync(Model, CancellationToken);
        await OnCreate.InvokeAsync(createdMatch);
    }
    private void CheckboxClicked(string checkID, object checkedValue)
    {
        if ((bool)checkedValue)
            Model!.Participants.Add(horses.First(x => x.Id == checkID));
        else
            Model!.Participants.Remove(horses.First(x => x.Id == checkID));
        StateHasChanged();
    }
    private void SetDefaultTime()
    {
        Model!.StartTime = MinStartTime.AddMinutes(1);
    }
    private async Task GetAllHorser()
    {
        horses = await HorseService.GetAllHorsesAsync(CancellationToken);
    }
}