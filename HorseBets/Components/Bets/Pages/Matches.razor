@page "/Matches"
@inject IMatchApi MatchService

@rendermode InteractiveServer

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Matches</PageTitle>
@if (matchesOnPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="match-grid">
            @foreach (var match in matchesOnPage)
            {
                <div class="match-content">
                    <Match MatchObject="@match" Client="@ClientState.Value.Client"></Match>
                </div>
            }
        </div>
        <div class="paginator">
            <PagePagination CurrentPageNumber="currentPageNumber" MaxShowPagesOnEachSide="maxShowPages" TotalPages="totalPages" OnChangePage="OnChangePage" />
        </div>
    </div>
}

@code {
    private int pageSize = 6;
    private int currentPageNumber = 1;
    private int totalPages = 200;
    private int maxShowPages = 5;
    private IEnumerable<HorseBets.Bets.Models.Match> matchesOnPage = null!;
    private event Action<int> OnChangePage = default!;

    [Inject]
    private IState<ClientState> ClientState { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnChangePage += ChangePage;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetPagesAsync();
    }
    private async Task SetPagesAsync()
    {
        totalPages = await MatchService.GetTotalAmountOfPagesAsync(pageSize);
        ChangePage(1);
    }
    private async void ChangePage(int page)
    {
        currentPageNumber = page;
        matchesOnPage = await MatchService.GetMatchesOnPageAsync(currentPageNumber, pageSize);
        await InvokeAsync(StateHasChanged);
    }
}